// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class queryAgeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryAgeReq> _instance;
} _queryAgeReq_default_instance_;
class queryAgeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryAgeRes> _instance;
} _queryAgeRes_default_instance_;
class queryNameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryNameReq> _instance;
} _queryNameReq_default_instance_;
class queryNameResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryNameRes> _instance;
} _queryNameRes_default_instance_;
static void InitDefaultsscc_info_queryAgeReq_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_queryAgeReq_default_instance_;
    new (ptr) ::queryAgeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::queryAgeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryAgeReq_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryAgeReq_order_2eproto}, {}};

static void InitDefaultsscc_info_queryAgeRes_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_queryAgeRes_default_instance_;
    new (ptr) ::queryAgeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::queryAgeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryAgeRes_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryAgeRes_order_2eproto}, {}};

static void InitDefaultsscc_info_queryNameReq_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_queryNameReq_default_instance_;
    new (ptr) ::queryNameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::queryNameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryNameReq_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryNameReq_order_2eproto}, {}};

static void InitDefaultsscc_info_queryNameRes_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_queryNameRes_default_instance_;
    new (ptr) ::queryNameRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::queryNameRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryNameRes_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryNameRes_order_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_order_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_order_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_order_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::queryAgeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::queryAgeReq, req_no_),
  PROTOBUF_FIELD_OFFSET(::queryAgeReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, ret_code_),
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, res_info_),
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, req_no_),
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, id_),
  PROTOBUF_FIELD_OFFSET(::queryAgeRes, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::queryNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::queryNameReq, req_no_),
  PROTOBUF_FIELD_OFFSET(::queryNameReq, id_),
  PROTOBUF_FIELD_OFFSET(::queryNameReq, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::queryNameRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::queryNameRes, ret_code_),
  PROTOBUF_FIELD_OFFSET(::queryNameRes, res_info_),
  PROTOBUF_FIELD_OFFSET(::queryNameRes, req_no_),
  PROTOBUF_FIELD_OFFSET(::queryNameRes, id_),
  PROTOBUF_FIELD_OFFSET(::queryNameRes, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::queryAgeReq)},
  { 7, -1, sizeof(::queryAgeRes)},
  { 17, -1, sizeof(::queryNameReq)},
  { 25, -1, sizeof(::queryNameRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_queryAgeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_queryAgeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_queryNameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_queryNameRes_default_instance_),
};

const char descriptor_table_protodef_order_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013order.proto\")\n\013queryAgeReq\022\016\n\006req_no\030\001"
  " \001(\005\022\n\n\002id\030\002 \001(\005\"Z\n\013queryAgeRes\022\020\n\010ret_c"
  "ode\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\016\n\006req_no\030\003 "
  "\001(\005\022\n\n\002id\030\004 \001(\005\022\013\n\003age\030\005 \001(\005\"8\n\014queryNam"
  "eReq\022\016\n\006req_no\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004type"
  "\030\003 \001(\005\"\\\n\014queryNameRes\022\020\n\010ret_code\030\001 \001(\005"
  "\022\020\n\010res_info\030\002 \001(\t\022\016\n\006req_no\030\003 \001(\005\022\n\n\002id"
  "\030\004 \001(\005\022\014\n\004name\030\005 \001(\t2c\n\014QueryService\022*\n\n"
  "query_name\022\r.queryNameReq\032\r.queryNameRes"
  "\022\'\n\tquery_age\022\014.queryAgeReq\032\014.queryAgeRe"
  "sB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_order_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_order_2eproto_sccs[4] = {
  &scc_info_queryAgeReq_order_2eproto.base,
  &scc_info_queryAgeRes_order_2eproto.base,
  &scc_info_queryNameReq_order_2eproto.base,
  &scc_info_queryNameRes_order_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_order_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto = {
  false, false, descriptor_table_protodef_order_2eproto, "order.proto", 414,
  &descriptor_table_order_2eproto_once, descriptor_table_order_2eproto_sccs, descriptor_table_order_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_order_2eproto::offsets,
  file_level_metadata_order_2eproto, 4, file_level_enum_descriptors_order_2eproto, file_level_service_descriptors_order_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_order_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_order_2eproto)), true);

// ===================================================================

void queryAgeReq::InitAsDefaultInstance() {
}
class queryAgeReq::_Internal {
 public:
};

queryAgeReq::queryAgeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:queryAgeReq)
}
queryAgeReq::queryAgeReq(const queryAgeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&req_no_, &from.req_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&req_no_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:queryAgeReq)
}

void queryAgeReq::SharedCtor() {
  ::memset(&req_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&req_no_)) + sizeof(id_));
}

queryAgeReq::~queryAgeReq() {
  // @@protoc_insertion_point(destructor:queryAgeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryAgeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void queryAgeReq::ArenaDtor(void* object) {
  queryAgeReq* _this = reinterpret_cast< queryAgeReq* >(object);
  (void)_this;
}
void queryAgeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryAgeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryAgeReq& queryAgeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryAgeReq_order_2eproto.base);
  return *internal_default_instance();
}


void queryAgeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:queryAgeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&req_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&req_no_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryAgeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 req_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryAgeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:queryAgeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 req_no = 1;
  if (this->req_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_req_no(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:queryAgeReq)
  return target;
}

size_t queryAgeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:queryAgeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 req_no = 1;
  if (this->req_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_no());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryAgeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:queryAgeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const queryAgeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryAgeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:queryAgeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:queryAgeReq)
    MergeFrom(*source);
  }
}

void queryAgeReq::MergeFrom(const queryAgeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:queryAgeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req_no() != 0) {
    _internal_set_req_no(from._internal_req_no());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void queryAgeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:queryAgeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryAgeReq::CopyFrom(const queryAgeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:queryAgeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryAgeReq::IsInitialized() const {
  return true;
}

void queryAgeReq::InternalSwap(queryAgeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryAgeReq, id_)
      + sizeof(queryAgeReq::id_)
      - PROTOBUF_FIELD_OFFSET(queryAgeReq, req_no_)>(
          reinterpret_cast<char*>(&req_no_),
          reinterpret_cast<char*>(&other->req_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryAgeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryAgeRes::InitAsDefaultInstance() {
}
class queryAgeRes::_Internal {
 public:
};

queryAgeRes::queryAgeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:queryAgeRes)
}
queryAgeRes::queryAgeRes(const queryAgeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_res_info(),
      GetArena());
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:queryAgeRes)
}

void queryAgeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryAgeRes_order_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(age_));
}

queryAgeRes::~queryAgeRes() {
  // @@protoc_insertion_point(destructor:queryAgeRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryAgeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryAgeRes::ArenaDtor(void* object) {
  queryAgeRes* _this = reinterpret_cast< queryAgeRes* >(object);
  (void)_this;
}
void queryAgeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryAgeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryAgeRes& queryAgeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryAgeRes_order_2eproto.base);
  return *internal_default_instance();
}


void queryAgeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:queryAgeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryAgeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "queryAgeRes.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 req_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          req_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryAgeRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:queryAgeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "queryAgeRes.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // int32 req_no = 3;
  if (this->req_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_req_no(), target);
  }

  // int32 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  // int32 age = 5;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:queryAgeRes)
  return target;
}

size_t queryAgeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:queryAgeRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 req_no = 3;
  if (this->req_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_no());
  }

  // int32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 age = 5;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryAgeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:queryAgeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const queryAgeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryAgeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:queryAgeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:queryAgeRes)
    MergeFrom(*source);
  }
}

void queryAgeRes::MergeFrom(const queryAgeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:queryAgeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {
    _internal_set_res_info(from._internal_res_info());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.req_no() != 0) {
    _internal_set_req_no(from._internal_req_no());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
}

void queryAgeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:queryAgeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryAgeRes::CopyFrom(const queryAgeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:queryAgeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryAgeRes::IsInitialized() const {
  return true;
}

void queryAgeRes::InternalSwap(queryAgeRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryAgeRes, age_)
      + sizeof(queryAgeRes::age_)
      - PROTOBUF_FIELD_OFFSET(queryAgeRes, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryAgeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryNameReq::InitAsDefaultInstance() {
}
class queryNameReq::_Internal {
 public:
};

queryNameReq::queryNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:queryNameReq)
}
queryNameReq::queryNameReq(const queryNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&req_no_, &from.req_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&req_no_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:queryNameReq)
}

void queryNameReq::SharedCtor() {
  ::memset(&req_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&req_no_)) + sizeof(type_));
}

queryNameReq::~queryNameReq() {
  // @@protoc_insertion_point(destructor:queryNameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void queryNameReq::ArenaDtor(void* object) {
  queryNameReq* _this = reinterpret_cast< queryNameReq* >(object);
  (void)_this;
}
void queryNameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryNameReq& queryNameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryNameReq_order_2eproto.base);
  return *internal_default_instance();
}


void queryNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:queryNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&req_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&req_no_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryNameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 req_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryNameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:queryNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 req_no = 1;
  if (this->req_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_req_no(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:queryNameReq)
  return target;
}

size_t queryNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:queryNameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 req_no = 1;
  if (this->req_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_no());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryNameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:queryNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const queryNameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryNameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:queryNameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:queryNameReq)
    MergeFrom(*source);
  }
}

void queryNameReq::MergeFrom(const queryNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:queryNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req_no() != 0) {
    _internal_set_req_no(from._internal_req_no());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void queryNameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:queryNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryNameReq::CopyFrom(const queryNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:queryNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryNameReq::IsInitialized() const {
  return true;
}

void queryNameReq::InternalSwap(queryNameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryNameReq, type_)
      + sizeof(queryNameReq::type_)
      - PROTOBUF_FIELD_OFFSET(queryNameReq, req_no_)>(
          reinterpret_cast<char*>(&req_no_),
          reinterpret_cast<char*>(&other->req_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryNameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryNameRes::InitAsDefaultInstance() {
}
class queryNameRes::_Internal {
 public:
};

queryNameRes::queryNameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:queryNameRes)
}
queryNameRes::queryNameRes(const queryNameRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_info().empty()) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_res_info(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:queryNameRes)
}

void queryNameRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryNameRes_order_2eproto.base);
  res_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
}

queryNameRes::~queryNameRes() {
  // @@protoc_insertion_point(destructor:queryNameRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryNameRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  res_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryNameRes::ArenaDtor(void* object) {
  queryNameRes* _this = reinterpret_cast< queryNameRes* >(object);
  (void)_this;
}
void queryNameRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryNameRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryNameRes& queryNameRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryNameRes_order_2eproto.base);
  return *internal_default_instance();
}


void queryNameRes::Clear() {
// @@protoc_insertion_point(message_clear_start:queryNameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryNameRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "queryNameRes.res_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 req_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          req_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "queryNameRes.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryNameRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:queryNameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "queryNameRes.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // int32 req_no = 3;
  if (this->req_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_req_no(), target);
  }

  // int32 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "queryNameRes.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:queryNameRes)
  return target;
}

size_t queryNameRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:queryNameRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (this->res_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 req_no = 3;
  if (this->req_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_no());
  }

  // int32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryNameRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:queryNameRes)
  GOOGLE_DCHECK_NE(&from, this);
  const queryNameRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryNameRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:queryNameRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:queryNameRes)
    MergeFrom(*source);
  }
}

void queryNameRes::MergeFrom(const queryNameRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:queryNameRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_info().size() > 0) {
    _internal_set_res_info(from._internal_res_info());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.req_no() != 0) {
    _internal_set_req_no(from._internal_req_no());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void queryNameRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:queryNameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryNameRes::CopyFrom(const queryNameRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:queryNameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryNameRes::IsInitialized() const {
  return true;
}

void queryNameRes::InternalSwap(queryNameRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  res_info_.Swap(&other->res_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryNameRes, id_)
      + sizeof(queryNameRes::id_)
      - PROTOBUF_FIELD_OFFSET(queryNameRes, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryNameRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QueryService::~QueryService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueryService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_order_2eproto);
  return file_level_service_descriptors_order_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* QueryService::GetDescriptor() {
  return descriptor();
}

void QueryService::query_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::queryNameReq*,
                         ::queryNameRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query_name() not implemented.");
  done->Run();
}

void QueryService::query_age(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::queryAgeReq*,
                         ::queryAgeRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query_age() not implemented.");
  done->Run();
}

void QueryService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_order_2eproto[0]);
  switch(method->index()) {
    case 0:
      query_name(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::queryNameReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::queryNameRes*>(
                 response),
             done);
      break;
    case 1:
      query_age(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::queryAgeReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::queryAgeRes*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueryService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::queryNameReq::default_instance();
    case 1:
      return ::queryAgeReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& QueryService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::queryNameRes::default_instance();
    case 1:
      return ::queryAgeRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

QueryService_Stub::QueryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
QueryService_Stub::QueryService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
QueryService_Stub::~QueryService_Stub() {
  if (owns_channel_) delete channel_;
}

void QueryService_Stub::query_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::queryNameReq* request,
                              ::queryNameRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void QueryService_Stub::query_age(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::queryAgeReq* request,
                              ::queryAgeRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::queryAgeReq* Arena::CreateMaybeMessage< ::queryAgeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::queryAgeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::queryAgeRes* Arena::CreateMaybeMessage< ::queryAgeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::queryAgeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::queryNameReq* Arena::CreateMaybeMessage< ::queryNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::queryNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::queryNameRes* Arena::CreateMaybeMessage< ::queryNameRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::queryNameRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
